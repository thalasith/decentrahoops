import { type NextPage } from "next";
import { useState, useEffect, useCallback } from "react";
import Head from "next/head";
import Header from "../../components/Header";
import { WalletSelectorContextProvider } from "../../contexts/WalletSelectorContext";
import { trpc } from "../../utils/trpc";
import { useRouter } from "next/router";
import { RiArrowLeftSFill, RiArrowRightSFill } from "react-icons/ri";
import { useWindowWidth } from "@react-hook/window-size";
import Link from "next/link";

import { useWalletSelector } from "../../contexts/WalletSelectorContext";
import { providers, utils } from "near-api-js";
import type {
  AccountView,
  CodeResult,
} from "near-api-js/lib/providers/provider";
import { CONTRACT_ID } from "../../constants";
import { RiArrowGoBackFill } from "react-icons/ri";

const Home: NextPage = () => {
  const router = useRouter();
  const { gameId } = router.query as { gameId: string };
  const windowWidth = useWindowWidth();

  const boxscore = trpc.nbaGames.gameById.useQuery({
    gameId: gameId,
  });

  const scoresNotStarted = ["0", "0", "0", "0", "0"];

  // TODO: fix up game data when game is live
  return (
    <>
      <Head>
        <title>Decentrahoops</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-gray-800 text-white">
        <WalletSelectorContextProvider>
          <Header />
          <div className="container mx-auto flex min-h-screen flex-col">
            <Link href="/games" className="mx-auto my-4 w-full lg:w-10/12">
              <button className="mx-1 inline-flex items-center justify-center whitespace-nowrap rounded-md border border-transparent bg-orange-600 px-1 py-1 text-base font-medium text-white shadow-sm hover:bg-orange-400">
                <RiArrowGoBackFill className="my-1" />
                Back to all Games
              </button>
            </Link>
            {boxscore.isSuccess && (
              <div className="mx-auto flex w-10/12 flex-col items-center justify-center rounded bg-orange-200 text-slate-700">
                <span> {boxscore?.data.status.type.detail}</span>
                <div className="flex w-full flex-row">
                  <div className=" flex w-1/2 items-center justify-end lg:mr-4 lg:w-2/5">
                    <div className="flex flex-col">
                      <span className="text-end font-semibold lg:text-2xl">
                        {windowWidth > 500
                          ? boxscore?.data.competitors[1].team.displayName
                          : boxscore?.data.competitors[1].team.abbreviation}
                      </span>
                      <span className="text-end text-xs">
                        {boxscore?.data.competitors[1].record[0].displayValue}
                        {windowWidth > 500 &&
                          ", " +
                            boxscore?.data.competitors[1].record[1]
                              .displayValue +
                            " AWAY"}
                      </span>
                    </div>
                    <img
                      className="h-12 w-12 lg:h-24 lg:w-24"
                      src={boxscore?.data.competitors[1].team.logos[0].href}
                    />
                    <span
                      className={`ml-2 flex items-center font-bold lg:text-4xl ${
                        boxscore?.data.competitors[1].winner
                          ? "text-black"
                          : "text-gray-500"
                      }`}
                    >
                      {boxscore?.data.competitors[1].score}
                      {boxscore?.data.competitors[1].winner && (
                        <RiArrowLeftSFill />
                      )}
                    </span>
                  </div>
                  <div className="mx-2 hidden w-1/5 flex-col items-center justify-center lg:flex">
                    <table className="table-auto">
                      <thead>
                        <tr className="border-b border-slate-400">
                          <th className="pr-2"></th>
                          <th className="px-2">1</th>
                          <th className="px-2">2</th>
                          <th className="px-2">3</th>
                          <th className="px-2">4</th>
                          {boxscore?.data.status.type.detail === "Final/OT" && (
                            <th className="px-2">OT</th>
                          )}
                          <th className="px-2 font-semibold">T</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <td className="pr-2">
                            {boxscore?.data.competitors[1].team.abbreviation}
                          </td>
                          {boxscore?.data.competitors[1].linescores
                            ? boxscore?.data.competitors[1].linescores.map(
                                (line: { displayValue: string }, i: number) => (
                                  <td key={i} className="px-2">
                                    {line.displayValue}
                                  </td>
                                )
                              )
                            : scoresNotStarted.map(
                                (line: string, i: number) => (
                                  <td key={i} className="px-2">
                                    {line}
                                  </td>
                                )
                              )}
                          <td className="px-2 font-semibold">
                            {boxscore?.data.competitors[1].score}
                          </td>
                        </tr>
                        <tr>
                          <td className="pr-2">
                            {boxscore?.data.competitors[0].team.abbreviation}
                          </td>
                          {boxscore?.data.competitors[0].linescores
                            ? boxscore?.data.competitors[0].linescores.map(
                                (line: { displayValue: string }, i: number) => (
                                  <td key={i} className="px-2">
                                    {line.displayValue}
                                  </td>
                                )
                              )
                            : scoresNotStarted.map(
                                (line: string, i: number) => (
                                  <td key={i} className="px-2">
                                    {line}
                                  </td>
                                )
                              )}
                          <td className="px-2 font-semibold">
                            {boxscore?.data.competitors[0].score}
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                  <div className="flex w-1/2 flex-row items-center justify-start lg:ml-4 lg:w-2/5">
                    <span
                      className={`ml-2 flex items-center font-bold lg:text-4xl ${
                        boxscore?.data.competitors[0].winner
                          ? "text-black"
                          : "text-gray-500"
                      }`}
                    >
                      {boxscore?.data.competitors[0].winner && (
                        <RiArrowRightSFill />
                      )}
                      {boxscore?.data.competitors[0].score}
                    </span>
                    <img
                      className="h-12 w-12 lg:h-24 lg:w-24"
                      src={boxscore?.data.competitors[0].team.logos[0].href}
                    />
                    <div className="flex flex-col">
                      <span className="text-start font-semibold lg:text-2xl">
                        {windowWidth > 500
                          ? boxscore?.data.competitors[0].team.displayName
                          : boxscore?.data.competitors[0].team.abbreviation}
                      </span>
                      <span className="text-start text-xs">
                        {boxscore?.data.competitors[0].record[0].displayValue}
                        {windowWidth > 500 &&
                          ", " +
                            boxscore?.data.competitors[0].record[1]
                              .displayValue +
                            " HOME"}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            )}
            {boxscore?.isSuccess && (
              <Bets
                homeTeam={boxscore?.data.competitors[0].team.abbreviation}
                awayTeam={boxscore?.data.competitors[1].team.abbreviation}
              />
            )}
          </div>
        </WalletSelectorContextProvider>
      </main>
    </>
  );
};

export default Home;

const Bets = (teams: { homeTeam: string; awayTeam: string }) => {
  const { selector } = useWalletSelector();
  const [bets, setBets] = useState([]);
  const getBets = useCallback(() => {
    const { network } = selector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    return provider
      .query<CodeResult>({
        request_type: "call_function",
        account_id: CONTRACT_ID,
        method_name: "get_all_bets",
        args_base64: "",
        finality: "optimistic",
      })
      .then((res) => JSON.parse(Buffer.from(res.result).toString()));
  }, [selector]);

  useEffect(() => {
    getBets().then(setBets);
  }, []);

  bets.map((bet: any) => console.log(bet));
  return (
    <div className="grid-row-3 mx-auto mt-4 grid w-10/12 items-center justify-center">
      {bets.map((bet: any, key: number) => (
        <div
          key={key}
          className="flex w-full flex-col items-center rounded bg-orange-200 py-2 px-4 text-slate-600"
        >
          <p>
            {teams.awayTeam} vs {teams.homeTeam}
          </p>
          <img
            className="h-12 w-12 lg:h-24 lg:w-24"
            src={`https://a.espncdn.com/i/teamlogos/nba/500/${bet.better_team}.png`}
          />
          <div className="flex w-full flex-row items-center justify-between border-t border-black">
            <div className="flex flex-col justify-start">
              <p>Odds</p>
              <p>-100 on {bet.better_team}</p>
            </div>
            <div className="flex flex-col justify-end">
              <p className="text-end">Total Pot</p>
              <p className="text-end">
                {utils.format.formatNearAmount(
                  (
                    parseInt(bet.better_deposit) +
                    parseInt(bet.market_maker_deposit)
                  ).toLocaleString("en-US", {
                    useGrouping: false,
                  }),
                  2
                )}{" "}
                N
              </p>
            </div>
          </div>
          <div className="mt-4 flex w-full flex-row items-center justify-between">
            <p>
              You pay <span className="font-extrabold">5 N</span>
            </p>
            <button className="mx-1 inline-flex items-center justify-center whitespace-nowrap rounded-md border border-transparent bg-orange-600 px-1 py-1 text-base font-medium text-white shadow-sm hover:bg-orange-400">
              {" "}
              Accept Bet
            </button>
          </div>
        </div>
      ))}
    </div>
  );
};
